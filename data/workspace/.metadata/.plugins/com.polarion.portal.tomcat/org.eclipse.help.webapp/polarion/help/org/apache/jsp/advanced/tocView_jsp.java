/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2017-06-22 04:26:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.advanced;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.eclipse.help.internal.webapp.data.*;

public final class tocView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/advanced/header.jsp", Long.valueOf(1252574902000L));
    _jspx_dependants.put("/advanced/tree.css", Long.valueOf(1252574902000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("org.eclipse.help.internal.webapp.data");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
 
request.setCharacterEncoding("UTF-8");
boolean isRTL = UrlUtil.isRTL(request, response);
String  direction = isRTL?"rtl":"ltr";
if (new RequestData(application,request, response).isMozilla()) {

      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n");
 
} else {

      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n");

}

      out.write("<!------------------------------------------------------------------------------\n");
      out.write(" ! Copyright (c) 2000, 2004 IBM Corporation and others.\n");
      out.write(" ! All rights reserved. This program and the accompanying materials \n");
      out.write(" ! are made available under the terms of the Eclipse Public License v1.0\n");
      out.write(" ! which accompanies this distribution, and is available at\n");
      out.write(" ! http://www.eclipse.org/legal/epl-v10.html\n");
      out.write(" ! \n");
      out.write(" ! Contributors:\n");
      out.write(" !     IBM Corporation - initial API and implementation\n");
      out.write(" ------------------------------------------------------------------------------->");
      out.write('\n');
      out.write('\n');
 
	TocData data = new TocData(application,request, response);
	WebappPreferences prefs = data.getPrefs();

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("\n");
      out.write("<title>");
      out.print(ServletResources.getString("Content", request));
      out.write("</title>\n");
      out.write("\n");
      out.write("<style type=\"text/css\">\n");
      out.write("/*******************************************************************************\n");
      out.write(" * Copyright (c) 2000, 2004 IBM Corporation and others.\n");
      out.write(" * All rights reserved. This program and the accompanying materials \n");
      out.write(" * are made available under the terms of the Eclipse Public License v1.0\n");
      out.write(" * which accompanies this distribution, and is available at\n");
      out.write(" * http://www.eclipse.org/legal/epl-v10.html\n");
      out.write(" * \n");
      out.write(" * Contributors:\n");
      out.write(" *     IBM Corporation - initial API and implementation\n");
      out.write(" *******************************************************************************/\n");
      out.write("\n");
      out.write("BODY {\n");
      out.write("\tbackground-color: ");
      out.print(prefs.getViewBackground());
      out.write(";\n");
      out.write("\tfont: ");
      out.print(prefs.getViewFont());
      out.write(";\n");
      out.write("\tmargin:0;\n");
      out.write("\tpadding:0;\n");
      out.write("\tborder:0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("UL { \n");
      out.write("\tborder-width:0; \n");
      out.write("\tmargin-");
      out.print(isRTL?"right":"left");
      out.write(":20px; \n");
      out.write("}\n");
      out.write("\n");
      out.write("#root {\n");
      out.write("\tmargin-top:5px;\n");
      out.write("\tmargin-");
      out.print(isRTL?"right":"left");
      out.write(":5px;\n");
      out.write("}\n");
      out.write("  \n");
      out.write("UL.expanded {\n");
      out.write("\tdisplay:block; \n");
      out.write("}\n");
      out.write("\n");
      out.write("UL.collapsed { \n");
      out.write("\tdisplay: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write("LI { \n");
      out.write("\tmargin-top:3px; \n");
      out.write("\tlist-style-image:none;\n");
      out.write("\tlist-style-type:none;\n");
      out.write("\t\twhite-space: nowrap;\n");
      out.write("}\n");
      out.write("\n");
      out.write("IMG {\n");
      out.write("\tborder:0px;\n");
      out.write("\tmargin:0px;\n");
      out.write("\tpadding:0px;\n");
      out.write("\tmargin-");
      out.print(isRTL?"left":"right");
      out.write(":4px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("A {\n");
      out.write("\ttext-decoration:none; \n");
      out.write("\tcolor:WindowText;\n");
      out.write("\tpadding-");
      out.print(isRTL?"left":"right");
      out.write(":2px;\n");
      out.write("\t/* this works in ie5.5, but not in ie5.0  */\n");
      out.write("\twhite-space: nowrap;\n");
      out.write("}\n");
      out.write("\n");
      out.write("A:hover{\n");
      out.write("\ttext-decoration:underline; \n");
      out.write("}\n");
      out.write("\n");
      out.write("A.active{ \n");
      out.write("\tbackground:Highlight;\n");
      out.write("\tcolor:HighlightText;\n");
      out.write("\twidth:100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write("A.active:hover{\n");
      out.write("\ttext-decoration:underline; \n");
      out.write("\tbackground:Highlight;\n");
      out.write("\tcolor:HighlightText;\n");
      out.write("\twidth:100%;\n");
      out.write("}\n");
      out.write("\n");
 
if (data.isMozilla()){

      out.write("\n");
      out.write("UL { \n");
      out.write("\tmargin-");
      out.print(isRTL?"right":"left");
      out.write(":-20px;\n");
      out.write("} \n");
      out.write("#root{ \n");
      out.write("\tmargin-");
      out.print(isRTL?"right":"left");
      out.write(":-35px; \n");
      out.write("\tmargin-top:5px;\n");
      out.write("} \n");
      out.write(" \n");

}

      out.write("\n");
      out.write("\n");
      out.write(".h {\n");
      out.write("\tvisibility:hidden;\n");
      out.write("}\n");
      out.write(" ");
      out.write("\n");
      out.write("</style>  \n");
      out.write("    \n");
      out.write("<base target=\"ContentViewFrame\">\n");
      out.write("<script language=\"JavaScript\">\n");
      out.write("\n");
      out.write("// Preload images\n");
      out.write("minus = new Image();\n");
      out.write("minus.src = \"");
      out.print(prefs.getImagesDirectory());
      out.write("\"+\"/minus.gif\";\n");
      out.write("plus = new Image();\n");
      out.write("plus.src = \"");
      out.print(prefs.getImagesDirectory());
      out.write("\"+\"/plus.gif\";\n");
      out.write("toc_open_img = new Image();\n");
      out.write("toc_open_img.src = \"");
      out.print(prefs.getImagesDirectory());
      out.write("\"+\"/toc_open.gif\";\n");
      out.write("toc_closed_img = new Image();\n");
      out.write("toc_closed_img.src = \"");
      out.print(prefs.getImagesDirectory());
      out.write("\"+\"/toc_closed.gif\";\n");
      out.write("folder_img = new Image();\n");
      out.write("folder_img.src = \"");
      out.print(prefs.getImagesDirectory());
      out.write("\"+\"/container_obj.gif\";\n");
      out.write("topic_img = new Image();\n");
      out.write("topic_img.src = \"");
      out.print(prefs.getImagesDirectory());
      out.write("\"+\"/topic.gif\";\n");
      out.write("altTopicClosed = \"");
      out.print(UrlUtil.JavaScriptEncode(ServletResources.getString("topicClosed", request)));
      out.write("\";\n");
      out.write("altTopicOpen = \"");
      out.print(UrlUtil.JavaScriptEncode(ServletResources.getString("topicOpen", request)));
      out.write("\";\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script language=\"JavaScript\" src=\"toc.js\"></script>\n");
      out.write("<script language=\"JavaScript\"> \n");
      out.write(" \n");
      out.write("/**\n");
      out.write(" * Loads the specified table of contents\n");
      out.write(" */\t\t\n");
      out.write("function loadTOC(tocHref)\n");
      out.write("{\n");
      out.write("\t// navigate to this toc, if not already loaded\n");
      out.write("\tif (window.location.href.indexOf(\"tocView.jsp?toc=\"+tocHref) != -1)\n");
      out.write("\t\treturn;\n");
      out.write("\twindow.location.replace(\"tocView.jsp?toc=\"+tocHref);\n");
      out.write("}\n");
      out.write("\n");
      out.write("var tocTitle = \"\";\n");
      out.write("var tocId = \"\";\n");
      out.write("\t\n");
      out.write("function onloadHandler()\n");
      out.write("{\n");

	if (data.getSelectedToc() != -1)
	{

      out.write("\n");
      out.write("\ttocTitle = '");
      out.print(UrlUtil.JavaScriptEncode(data.getTocLabel(data.getSelectedToc())));
      out.write("';\n");
      out.write("\tvar tocTopic = \"");
      out.print(data.getTocDescriptionTopic(data.getSelectedToc()));
      out.write("\";\n");
      out.write("\t\n");
      out.write("\t// set title on the content toolbar\n");
      out.write("\tparent.parent.parent.setContentToolbarTitle(tocTitle);\n");
      out.write("\t\t\n");
      out.write("\tvar topicSelected=false;\n");
      out.write("\t// select specified topic, or else the book\n");
      out.write("\tvar topic = \"");
      out.print(data.getSelectedTopic());
      out.write("\";\n");
      out.write("\tif (topic != \"about:blank\" && topic != tocTopic) {\n");
      out.write("\t\tif (topic.indexOf(window.location.protocol) != 0 && topic.length > 2) {\n");
      out.write("\t\t\t// remove the .. from topic\n");
      out.write("\t\t\ttopic = topic.substring(2);\n");
      out.write("\t\t\t// remove advanced/tocView.jsp from path to obtain contextPath\n");
      out.write("\t\t\tvar contextPath = window.location.pathname;\n");
      out.write("\t\t\tvar slash = contextPath.lastIndexOf('/');\n");
      out.write("\t\t\tif(slash > 0) {\n");
      out.write("\t\t\t\tslash = contextPath.lastIndexOf('/', slash-1);\n");
      out.write("\t\t\t\tif(slash >= 0) {\n");
      out.write("\t\t\t\t\tcontextPath = contextPath.substr(0, slash);\n");
      out.write("\t\t\t\t\ttopic = window.location.protocol + \"//\" +window.location.host + contextPath + topic;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t\ttopicSelected = selectTopic(topic);\n");
      out.write("\t} else {\n");
      out.write("\t\ttopicSelected = selectTopicById(tocId);\n");
      out.write("\t}\n");

	// if topic failed to be selected, but we know it exist in some book,
	// offer to turn on "show all"
	
	// do not offer to show all just after it was manually turned off
	if (null==request.getParameter("showAll")) {

      out.write("\n");
      out.write("\tif(!topicSelected){\n");
      out.write("\t\tif(parent.parent.activityFiltering){\n");
      out.write("\t\t\taskShowAll();\n");
      out.write("\t\t}\n");
      out.write("\t}\n");

	}

      out.write('\n');

	} else if ("yes".equals(request.getParameter("synch"))) {

      out.write("\n");
      out.write("\tvar message='");
      out.print(UrlUtil.JavaScriptEncode(ServletResources.getString("CannotSync", request)));
      out.write("';\n");
      out.write("\t// when we don't find the specified toc, we just restore navigation\n");
      out.write("\tparent.parent.parent.restoreNavigation(message);\n");

	}

      out.write("\n");
      out.write("\tfocusHandler(\"e\");\n");
      out.write("}\n");
      out.write("\n");
      out.write("var askShowAllDialog;\n");
      out.write("var w = 470;\n");
      out.write("var h = 270;\n");
      out.write("\n");
      out.write("function askShowAll(){\n");

if (data.isIE()){

      out.write("\n");
      out.write("\tvar l = top.screenLeft + (top.document.body.clientWidth - w) / 2;\n");
      out.write("\tvar t = top.screenTop + (top.document.body.clientHeight - h) / 2;\n");

} else {

      out.write("\n");
      out.write("\tvar l = top.screenX + (top.innerWidth - w) / 2;\n");
      out.write("\tvar t = top.screenY + (top.innerHeight - h) / 2;\n");

}

      out.write("\n");
      out.write("\t// move the dialog just a bit higher than the middle\n");
      out.write("\tif (t-50 > 0) t = t-50;\n");
      out.write("\t\n");
      out.write("\twindow.location=\"javascript://needModal\";\n");
      out.write("\taskShowAllDialog = window.open(\"askShowAll.jsp\", \"askShowAllDialog\", \"resizeable=no,height=\"+h+\",width=\"+w+\",left=\"+l+\",top=\"+t );\n");
      out.write("\taskShowAllDialog.focus(); \n");
      out.write("}\n");
      out.write("\n");
      out.write("function yesShowAll(){\n");
      out.write("\twindow.parent.parent.showAll();\n");
      out.write("}\n");
      out.write("\n");
      out.write("function closeAskShowAllDialog(){\n");
      out.write("\ttry {\n");
      out.write("\t\tif (askShowAllDialog){\n");
      out.write("\t\t\taskShowAllDialog.close();\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\tcatch(e) {}\n");
      out.write("}\n");
      out.write("\n");
      out.write("function onunloadHandler() {\n");
      out.write("\tcloseAskShowAllDialog();\n");

// for large books, we want to avoid a long unload time
if (data.isIE()){

      out.write("\n");
      out.write("\tdocument.body.innerHTML = \"\";\n");

}

      out.write("\n");
      out.write("}\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("\n");
      out.write("<body dir=\"");
      out.print(direction);
      out.write("\" onload=\"onloadHandler()\" onunload=\"onunloadHandler()\">\n");
      out.write("\t<ul dir=\"");
      out.print(direction);
      out.write("\" class='expanded' id='root'>\n");

	for (int toc=0; toc<data.getTocCount(); toc++) {
		boolean isSelected =data.getSelectedToc() != -1 &&
					   data.getTocHref(data.getSelectedToc()).equals(data.getTocHref(toc));
		if(!data.isEnabled(toc)){
			// do not show
			continue;
		}
		if(isSelected) {

      out.write("\n");
      out.write("\t\t<li>\n");
      out.write("\t\t<img src=\"");
      out.print(prefs.getImagesDirectory());
      out.write("/toc_open.gif\" alt=\"");
      out.print(ServletResources.getString("bookOpen", request));
      out.write("\"><a id=\"b");
      out.print(toc);
      out.write("\" name=\"opened\" style=\"font-weight: bold;\" href=\"");
      out.print(data.getTocDescriptionTopic(toc));
      out.write("\" onclick=''>");
      out.print(data.getTocLabel(toc));
      out.write("</a>\n");

			// Only generate the selected toc
			data.generateToc(toc, out);
			// keep track of the selected toc id

      out.write("\n");
      out.write("\t\t\t<script language=\"JavaScript\">tocId=\"b\"+");
      out.print(toc);
      out.write("</script>\n");

		} else {

      out.write("\n");
      out.write("\t\t<li>\n");
      out.write("\t\t<img src=\"");
      out.print(prefs.getImagesDirectory());
      out.write("/toc_closed.gif\" alt=\"");
      out.print(ServletResources.getString("bookClosed", request));
      out.write("\"><a id=\"b");
      out.print(toc);
      out.write("\" name=\"");
      out.print(data.getTocHref(toc));
      out.write("\" style=\"font-weight: bold;\" href=\"");
      out.print(data.getTocDescriptionTopic(toc));
      out.write("\" onclick='loadTOC(\"");
      out.print(data.getTocHref(toc));
      out.write("\")'>");
      out.print(data.getTocLabel(toc));
      out.write("</a>\n");

		}

      out.write("\n");
      out.write("\t\t</li>\t\n");

	}

      out.write("\t\t\n");
      out.write("\t</ul>\n");
      out.write("   <iframe name=\"dynLoadFrame\" title=\"");
      out.print(ServletResources.getString("ignore", "dynLoadFrame", request));
      out.write("\" style=\"visibility:hidden\" tabindex=\"-1\" frameborder=\"no\" width=\"0\" height=\"0\" scrolling=\"no\">\n");
      out.write("    </iframe>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
